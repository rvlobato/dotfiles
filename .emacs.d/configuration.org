#+TITLE: Emacs Configuration
#+AUTHOR: Ronaldo V. Lobato
#+EMAIL: vieira.lobato@gmail.com
#+OPTIONS: toc:nil num:nil

* Agenda & todo
** Agenda

#+BEGIN_SRC emacs-lisp
;; List of all the files & directories where todo items can be found. Only one
;; for now: My default notes file.
(setq org-agenda-files (list org-default-notes-file))
;; Display tags really close to their tasks.
(setq org-agenda-tags-column -10)
;; How many days ahead the default agenda view should look
(setq org-agenda-span 'day)
;; May be any number; the larger the slower it takes to generate the view.
;; One day is thus the fastest ^_^
;; How many days early a deadline item will begin showing up in your agenda list.
(setq org-deadline-warning-days 14)
;; In the agenda view, days that have no associated tasks will still have a line showing the date.
(setq org-agenda-show-all-dates t)
;; Scheduled items marked as complete will not show up in your agenda view.
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done  t)
(setq org-agenda-start-on-weekday nil)
(global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

*** Super-agenda

#+BEGIN_SRC emacs-lisp
(use-package org-super-agenda
  :hook (org-agenda-mode . origami-mode) ;; Easily fold groups via TAB.
  :bind (:map org-super-agenda-header-map ("<tab>" . origami-toggle-node))
  :config
  (org-super-agenda-mode)
  (setq org-super-agenda-groups
	'((:name "Important" :priority "A")
	  (:name "Personal" :habit t)
	  ;; For everything else, nicely display their heading hierarchy list.
	  (:auto-map (lambda (e) (org-format-outline-path (org-get-outline-path)))))))

;; MA: No noticable effect when using org-super-agenda :/
;;
;; Leave new line at the end of an entry.
;; (setq org-blank-before-new-entry '((heading . t) (plain-list-item . t)))
#+END_SRC

** TO-DO

*** Capture

#+BEGIN_SRC emacs-lisp
;; Location of my todos/notes file
(setq org-default-notes-file "~/Sync/org/agenda.org")

;; “C-c c” to quickly capture a task/note
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

*** TODO-s respect hierarchical structure

#+BEGIN_SRC emacs-lisp
;; Cannot mark an item DONE if it has a  TODO child.
;; Conversely, all children must be DONE in-order for a parent to be DONE.
(setq org-enforce-todo-dependencies t)
#+END_SRC

*** Priority levels and their colours

#+begin_src emacs-lisp
(setq org-lowest-priority ?D) ;; Now org-speed-eky ‘,’ gives 4 options
(setq org-priority-faces
'((?A :foreground "red" :weight bold)
  (?B . "orange")
  (?C . "yellow")
  (?D . "green")))
#+end_src

* Behaviour
** Auto-revert mode refresh

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

** Auto-save

#+BEGIN_SRC emacs-lisp
(setq auto-save-visited-file-name t)
(setq auto-save-visited-interval 300)
#+END_SRC

** Window-numbering

#+BEGIN_SRC emacs-lisp
(use-package window-numbering)
(window-numbering-mode 1)
#+END_SRC

** Change buffer names for files with the same name. Note that ‘uniquify’ is builtin.

#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-separator "/"               ;; The separator in buffer names.
      uniquify-buffer-name-style 'forward) ;; names/in/this/style
#+END_SRC

** Goes to the last place where it was when you previously visited the same file

#+BEGIN_SRC emacs-lisp
(setq-default save-place  t)
(setq save-place-file "~/.emacs.d/etc/saveplace")
#+END_SRC

** Make it easier to discover key shortcuts

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode)
  (which-key-setup-side-window-bottom)
  (setq which-key-idle-delay 0.5))
#+END_SRC

** Desired colored output shell

#+BEGIN_SRC emacs-lisp
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+END_SRC

** Modify the titlebar & others minor

#+BEGIN_SRC emacs-lisp
(setq frame-title-format `(,(user-login-name) "@" ,(system-name) "    %f"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(display-time-mode t) ;; Display of time
(tool-bar-mode   -1)  ;; No large icons
(scroll-bar-mode -1)  ;; No visual indicator
(menu-bar-mode   -1)  ;; No menu bar
#+END_SRC

** Moving text around

#+BEGIN_SRC emacs-lisp
;; M-↑,↓ moves line, or marked region; prefix is how many lines.
(use-package move-text
  :config (move-text-default-bindings))
#+END_SRC

** Better text selection

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind ("C-=" . er/expand-region))
#+END_SRC

** Mouse editing support

#+BEGIN_SRC emacs-lisp
(setq mouse-drag-copy-region t)
#+END_SRC

** Jumping to definitions & references

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :bind (("M-g q"     . dumb-jump-quick-look) ;; Show me in a tooltip.
	 ("M-g ."     . dumb-jump-go-other-window)
	 ("M-g b"     . dumb-jump-back)
	 ("M-g p"     . dumb-jump-go-prompt)
	 ("M-g a"     . xref-find-apropos)) ;; aka C-M-.
  :config
  ;; If source file is visible, just shift focus to it.
  (setq dumb-jump-use-visible-window t))
#+END_SRC

** Highlight defined Lisp symbols

#+BEGIN_SRC emacs-lisp
;; Emacs Lisp specific
(use-package highlight-defined
  :hook (emacs-lisp-mode . highlight-defined-mode))
#+END_SRC

** Bookmarks

#+begin_src emacs-lisp
(setq bookmark-default-file "~/Sync/gdrive/configs/emacs/bookmarks")
#+end_src

* Cosmetics

** Disable startup message

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
      initial-scratch-message nil)
#+END_SRC

** Mods in the modeline

#+BEGIN_SRC emacs-lisp
(use-package mood-line
  :config
  (mood-line-mode t))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
(use-package gruvbox-theme)
(load-theme 'gruvbox-dark-hard t)
(set-face-background 'mode-line "black")
#+End_SRC

** Flashing when something goes wrong

 #+BEGIN_SRC emacs-lisp
 (setq visible-bell 1)
 (blink-cursor-mode 1)
 #+END_SRC

** Dimming unused windows

#+BEGIN_SRC emacs-lisp
(use-package dimmer
  :config (dimmer-mode))
#+END_SRC

** Highlight matching ‘parenthesis’

#+BEGIN_SRC emacs-lisp
(setq show-paren-delay  0)
(setq show-paren-style 'mixed)
(show-paren-mode)
#+END_SRC

** Rainbow-mode

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode)
#+END_SRC

** Rainbow delimiters

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook ((org-mode prog-mode text-mode) . rainbow-delimiters-mode))
#+END_SRC

** Unique highlighting to identifiers

#+BEGIN_SRC emacs-lisp
(use-package color-identifiers-mode
  :config (global-color-identifiers-mode))
;; Sometimes just invoke: M-x color-identifiers:refresh
(run-with-idle-timer 5 t 'color-identifiers:refresh)
#+END_SRC

** Visual line mode

#+BEGIN_SRC emacs-lisp
;; Bent arrows at the end and start of long lines.
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
(global-visual-line-mode 1)
#+END_SRC

* Git

** auto-commit

#+begin_src emacs-lisp
(use-package git-auto-commit-mode)
#+end_src

** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  ("C-x g" . magit-status)
  ("C-c m" . magit-blame)
  :config (magit-add-section-hook 'magit-status-sections-hook
				    'magit-insert-unpushed-to-upstream
				    'magit-insert-unpushed-to-upstream-or-recent
				    'replace))
#+END_SRC

* Personal information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Ronaldo V. Lobato"
      user-mail-address "vieira.lobato@gmail.com"
      calendar-latitude 33.2471
      calendar-longitude 95.9000
      calendar-location-name "Commerce, Texas")
#+END_SRC

* Spelling
** Cleaning-up any accidental trailing white-space

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC

** Word Completion

*** Company

**** configs

#+BEGIN_SRC emacs-lisp
(use-package company
  :config
  (global-company-mode 1)
  (setq ;; Only 2 letters required for completion to activate.
   company-minimum-prefix-length 2
   ;; Search other buffers for compleition candidates
   company-dabbrev-other-buffers t
   company-dabbrev-code-other-buffers t
   ;; Show candidates according to importance, then case, then in-buffer frequency
   company-transformers '(company-sort-by-backend-importance
			  company-sort-prefer-same-case-prefix
			  company-sort-by-occurrence)
   ;; Flushright any annotations for a compleition;
   ;; e.g., the description of what a snippet template word expands into.
   company-tooltip-align-annotations t
   ;; Allow (lengthy) numbers to be eligible for completion.
   company-complete-number t
   ;; M-⟪num⟫ to select an option according to its number.
   company-show-numbers t
   ;; Show 10 items in a tooltip; scrollbar otherwise or C-s ^_^
   company-tooltip-limit 10
   ;; Edge of the completion list cycles around.
   company-selection-wrap-around t
   ;; Do not downcase completions by default.
   company-dabbrev-downcase nil
   ;; Even if I write something with the ‘wrong’ case,
   ;; provide the ‘correct’ casing.
   company-dabbrev-ignore-case nil
   ;; Immediately activate completion.
   company-idle-delay 0)
  ;; Use C-/ to manually start company mode at point. C-/ is used by undo-tree.
  ;; Override all minor modes that use C-/; bind-key* is discussed below.
  (bind-key* "C-/" #'company-manual-begin)
  ;; Bindings when the company list is active.
  :bind (:map company-active-map
	      ("C-d" . company-show-doc-buffer) ;; In new temp buffer
	      ("<tab>" . company-complete-selection)
	      ;; Use C-n,p for navigation in addition to M-n,p
	      ("C-n" . (lambda () (interactive) (company-complete-common-or-cycle 1)))
	      ("C-p" . (lambda () (interactive) (company-complete-common-or-cycle -1)))))
;; It's so fast that we don't need a key-binding to start it!
#+END_SRC

**** company quickhelp

#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :config
  (setq company-quickhelp-delay 0.1)
  (company-quickhelp-mode))
#+END_SRC

**** company-suggest

#+begin_src emacs-lisp
(use-package company-suggest)
(setq company-suggest-complete-sentence t)
(add-to-list 'company-backends 'company-suggest-google)
(add-to-list 'company-backends 'company-suggest-wiktionary)
#+end_src

**** Company-web

#+begin_src emacs-lisp
(require 'company)                                   ; load company mode
;(require 'company-web-html)                          ; load company mode html backend
#+end_src

**** Company-math

#+begin_src emacs-lisp
(use-package company-math)
;; global activation of the unicode symbol completion
(add-to-list 'company-backends 'company-math-symbols-unicode)
(use-package math-symbol-lists)
#+end_src

**** Company-AUCTeX

#+begin_src emacs-lisp
(use-package company-auctex)
(require 'company-auctex)
(company-auctex-init)
#+end_src

**** Company-c-headers

#+begin_src emacs-lisp
(use-package company-c-headers)
(add-to-list 'company-backends 'company-c-headers)
#+end_src

** Yasnippet

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :init (yas-global-mode 1))
#+END_SRC

** Emacs-langtool

#+BEGIN_SRC emacs-lisp
(use-package langtool
  :bind
  ("C-c l" . langtool-check)
  ("C-c d l" . langtool-check-done)
  :custom
  (langtool-java-classpath
   "/usr/share/languagetool:/usr/share/java/languagetool/*"))
#+END_SRC

** Word Wrapping

#+BEGIN_SRC emacs-lisp
(dolist (hook '(text-mode-hook latex-mode-hook tex-mode-hook))
  (add-hook hook (lambda () (set-fill-column 100))))
(dolist (hook '(python-mode-hook prog-mode-hook list-mode-hook))
  (add-hook hook (lambda () (set-fill-column 100))))
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC

** Flyspell mode

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :hook ((prog-mode . flyspell-prog-mode)
	 ((org-mode text-mode) . flyspell-mode)))
(add-hook          'c-mode-hook 'flyspell-prog-mode)
(add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode)
#+END_SRC

** Set the default dictionary Ispell

#+BEGIN_SRC emacs-lisp
(setq ispell-dictionary "english")
#+END_SRC

** Synosaurus

#+BEGIN_SRC emacs-lisp
(use-package synosaurus
  :init    (synosaurus-mode)
  :config  (setq synosaurus-choose-method 'popup) ;; 'ido is default.
	   (global-set-key (kbd "M-#") 'synosaurus-choose-and-replace))
#+END_SRC

** Wordnet as a dictionary via the wordnut

#+begin_src emacs-lisp
(use-package wordnut
 :bind ("M-!" . wordnut-lookup-current-word))
#+end_src

** Write-good

#+BEGIN_SRC emacs-lisp
(use-package writegood-mode
  ;; Load this whenver I'm composing prose.
  :hook (text-mode org-mode)
  ;; Some additional weasel words.
  :config
  (--map (push it writegood-weasel-words)
	 '("some" "simple" "simply" "easy" "often" "easily" "probably"
	   "clearly"               ;; Is the premise undeniably true?
	   "experience shows"      ;; Whose? What kind? How does it do so?
	   "may have"              ;; It may also have not!
	   "it turns out that")))  ;; How does it turn out so?
	   ;; ↯ What is the evidence of highighted phrase? ↯
#+END_SRC

** Define word

#+BEGIN_SRC emacs-lisp
(use-package define-word)
#+END_SRC

** Placeholder Text

#+BEGIN_SRC emacs-lisp
(use-package lorem-ipsum :defer t)
#+END_SRC

** Google translate

#+BEGIN_SRC emacs-lisp
(use-package google-translate
 :defer t
 :config
   (global-set-key "\C-ct" 'google-translate-at-point))
#+END_SRC

* Frameworks & libraries
** Async

#+BEGIN_SRC emacs-lisp
(use-package async)
(autoload 'dired-async-mode "dired-async.el" nil t)
(dired-async-mode 1)
(async-bytecomp-package-mode 1)
#+END_SRC

*** ob-async

#+begin_src emacs-lisp
(use-package ob-async)
#+end_src

** Dired

#+BEGIN_SRC emacs-lisp
(use-package dired-subtree
  :bind (:map dired-mode-map
	      ("i" . dired-subtree-toggle)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package dired-collapse
  :hook (dired-mode . dired-collapse-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package dired-filter
  :hook (dired-mode . (lambda () (dired-filter-group-mode)
				 (dired-filter-by-garbage)))
  :custom
    (dired-garbage-files-regexp
      "\\(?:\\.\\(?:aux\\|bak\\|dvi\\|log\\|orig\\|rej\\|toc\\|out\\)\\)\\'")
    (dired-filter-group-saved-groups
      '(("default"
	 ("Org"    (extension "org"))
	 ("Executables" (exexutable))
	 ("Directories" (directory))
	 ("PDF"    (extension "pdf"))
	 ("LaTeX"  (extension "tex" "bib"))
	 ("Images" (extension "png"))
	 ("Code"   (extension "hs" "agda" "lagda"))
	 ("Archives"(extension "zip" "rar" "gz" "bz2" "tar"))))))
#+END_SRC

** Having a workspace manager in Emacs

#+begin_src emacs-lisp
(use-package perspective
  :defer t
  :config ;; Activate it.
	  (persp-mode)
	  ;; In the modeline, tell me which workspace I'm in.
	  (persp-turn-on-modestring))
#+end_src

** Helm
*** General

#+BEGIN_SRC emacs-lisp
(use-package helm
 :init (helm-mode t)
 :bind (("M-x"     . helm-M-x)
	("C-x C-f" . helm-find-files)
	("C-x b"   . helm-mini)     ;; See buffers & recent files; more useful.
	("C-x r b" . helm-filtered-bookmarks)
	("C-x C-r" . helm-recentf)  ;; Search for recently edited files
	("C-c i"   . helm-imenu)
	("C-h a"   . helm-apropos)
	;; Look at what was cut recently & paste it in.
	("M-y" . helm-show-kill-ring)

	:map helm-map
	;; We can list ‘actions’ on the currently selected item by C-z.
	("C-z" . helm-select-action)
	;; Let's keep tab-completetion anyhow.
	("TAB"   . helm-execute-persistent-action)
	("<tab>" . helm-execute-persistent-action)))
#+END_SRC

*** Current buffers, recent files, and bookmarks

#+BEGIN_SRC emacs-lisp
(setq helm-mini-default-sources '(helm-source-buffers-list
				    helm-source-recentf
				    helm-source-bookmarks
				    helm-source-bookmark-set
				    helm-source-buffer-not-found))
#+END_SRC

*** helm-lsp

#+BEGIN_SRC emacs-lisp
(use-package helm-lsp
  :config
  (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))
#+END_SRC

*** helm-swoop

#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
  :bind  (("C-s"     . 'helm-swoop)           ;; search current buffer
	  ("C-M-s"   . 'helm-multi-swoop-all) ;; Search all buffer
	  ;; Go back to last position where ‘helm-swoop’ was called
	  ("C-S-s" . 'helm-swoop-back-to-last-point))
  :custom (helm-swoop-speed-or-color nil "Give up colour for speed.")
	  (helm-swoop-split-with-multiple-windows nil "Do not split window inside the current window."))
#+END_SRC

*** helm-company

#+BEGIN_SRC emacs-lisp
(use-package helm-company)
(eval-after-load 'company
  '(progn
     (define-key company-mode-map (kbd "C-:") 'helm-company)
     (define-key company-active-map (kbd "C-:") 'helm-company)))
#+END_SRC

*** helm-org

#+begin_src emacs-lisp
(use-package helm-org) ;; Helm for org headlines and keywords completion.
(add-to-list 'helm-completing-read-handlers-alist
	     '(org-set-tags-command . helm-org-completing-read-tags))
#+end_src

*** helm-css

#+begin_src emacs-lisp
(use-package helm-css-scss)
(require 'helm-css-scss)
#+end_src

*** helm-sage

#+begin_src emacs-lisp
(use-package helm-sage)
(eval-after-load "sage-shell-mode"
  '(sage-shell:define-keys sage-shell-mode-map
     "C-c C-i"  'helm-sage-complete
     "C-c C-h"  'helm-sage-describe-object-at-point
     "M-r"      'helm-sage-command-history
     "C-c o"    'helm-sage-output-history))
#+end_src

** Hydra

#+begin_src emacs-lisp
(use-package hydra)
(use-package pretty-hydra)
#+end_src

** Projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile)
(projectile-mode +1)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC

** Ripgrep

#+BEGIN_SRC emacs-lisp
(use-package rg
  :config
  (global-set-key (kbd "M-s g") 'rg)
  (global-set-key (kbd "M-s d") 'rg-dwim))
(use-package helm-rg)
#+END_SRC

* Programming languages
** Adds spacing around operators

#+BEGIN_SRC emacs-lisp
(use-package electric-operator
:hook (c-mode . electric-operator-mode))
#+END_SRC

** C

#+BEGIN_SRC emacs-lisp
(defun c-lineup-arglist-tabs-only (ignored)
  "Line up argument lists by tabs, not spaces"
  (let* ((anchor (c-langelem-pos c-syntactic-element))
	   (column (c-langelem-2nd-pos c-syntactic-element))
	   (offset (- (1+ column) anchor))
	   (steps (floor offset c-basic-offset)))
    (* (max steps 1)
	 c-basic-offset)))

(add-hook 'c-mode-common-hook
	    (lambda ()
	      ;; Add kernel style
	      (c-add-style
	       "linux-tabs-only"
	       '("linux" (c-offsets-alist
			  (arglist-cont-nonempty
			   c-lineup-gcc-asm-reg
			   c-lineup-arglist-tabs-only))))))

(add-hook 'c-mode-hook (lambda ()
			   (setq indent-tabs-mode t)
			   (setq show-trailing-whitespace t)
			   (c-set-style "linux-tabs-only")))
#+END_SRC

** dap-mode

#+BEGIN_SRC emacs-lisp
(use-package dap-mode)
(add-hook 'dap-stopped-hook
	  (lambda (arg) (call-interactively #'dap-hydra)))
#+END_SRC

** Documentation pop-up on a completion

#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
 :config
   (setq company-quickhelp-delay 0.1)
   (company-quickhelp-mode))
#+END_SRC

** Eldoc

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :hook (emacs-lisp-mode . turn-on-eldoc-mode)
	(lisp-interaction-mode . turn-on-eldoc-mode)
	(haskell-mode . turn-on-haskell-doc-mode)
	(haskell-mode . turn-on-haskell-indent))
#+END_SRC

** Elisp

*** Disable silly docstring warnings when editing elisp

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'flycheck
(add-to-list 'flycheck-disabled-checkers 'emacs-lisp-checkdoc))
#+END_SRC

*** Matching parens

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'check-parens)
#+end_src

** Flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
:init (global-flycheck-mode)
:custom (flycheck-display-errors-delay .3))
#+END_SRC

** GO

#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :defer t
  :mode "\\*.go\\'"
  :init
  (add-hook 'before-save-hook 'gofmt-before-save)
  (local-set-key (kbd "M-.") 'godef-jump)
  (add-hook 'go-mode-hook (lambda ()
			      (set (make-local-variable 'company-backends) '(company-go))
			      (company-mode))))

(use-package company-go)
#+END_SRC

** HTML

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :defer t
  :mode ("\\.html\\'" "\\.jinja\\'")
  :config (setq web-mode-markup-indent-offset 2
		  web-mode-code-indent-offset 2))

(use-package emmet-mode
  :config (add-hook 'web-mode-hook 'emmet-mode))
#+END_SRC

** Julia

*** Julia-mode

#+begin_src emacs-lisp
(use-package julia-mode)
#+end_src

** lsp-mode

#+BEGIN_SRC emacs-lisp
;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
(setq lsp-keymap-prefix "s-l")

(use-package lsp-mode
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	    (prog-mode . lsp)
	    ;; if you want which-key integration
	    (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)
#+END_SRC

** lsp-ui

#+BEGIN_SRC emacs-lisp
(use-package lsp-ui)
#+END_SRC

** lsp-ivy

#+begin_src emacs-lisp
(use-package lsp-ivy)
#+end_src

** lsp-julia

#+begin_src emacs-lisp
(use-package lsp-julia)
(add-hook 'ess-julia-mode-hook #'lsp-mode)
#+end_src

** Python

*** Elpy

#+begin_src emacs-lisp
(use-package elpy
  :init
  (elpy-enable))
#+end_src

** Rust

#+BEGIN_SRC emacs-lisp
(use-package rustic)
#+END_SRC

** Which function are we writing?
; In the modeline, show the name of the function we’re currently writing.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'which-function-mode)
(add-hook 'org-mode-hook  #'which-function-mode)
#+END_SRC

** Jupyter

#+begin_src emacs-lisp
(use-package jupyter)
#+end_src

** Sage

*** sage-shell-mode

#+begin_src emacs-lisp
(use-package sage-shell-mode
  :init
  (sage-shell:define-alias)
  :config
  (setq sage-shell:use-prompt-toolkit nil)
  :hook
  (sage-shell-mode-hook . eldoc-mode)
  (sage-shell:sage-mode-hook . eldoc-mode)
  (sage-shell-after-prompt-hook . sage-shell-view-mode)
  )
#+end_src

*** ob-sagemath

#+begin_src emacs-lisp
(use-package ob-sagemath
  :config
(setq org-babel-default-header-args:sage '((:session . t)
					   (:results . "output")))
(with-eval-after-load "org"
  (define-key org-mode-map (kbd "C-c c") 'ob-sagemath-execute-async))
)
#+end_src

* Security

#+BEGIN_SRC emacs-lisp
(require 'epa-file)
(epa-file-enable)
#+END_SRC

* Email

#+BEGIN_SRC emacs-lisp
(use-package gnus
:config
(setq user-mail-address "vieira.lobato@gmail.com"
user-full-name "Ronaldo V. Lobato")

(setq gnus-select-method '(nnnil))
(setq gnus-secondary-select-methods
'((nntp "news.gwene.org")
(nnimap "gmail"
(nnimap-address "imap.gmail.com")
(nnimap-server-port "imaps")
(nnimap-stream ssl)
(nnmail-expiry-target "nnimap+gmail:[Gmail]/Trash")
(nnmail-expiry-wait immediate))))

(setq smtpmail-smtp-server "smtp.gmail.com"
smtpmail-smtp-service 587
gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")

(setq send-mail-function		'smtpmail-send-it
message-send-mail-function	'smtpmail-send-it)

(defun my-message-mode-setup ()
(setq fill-column 72)
(turn-on-auto-fill))
(add-hook 'message-mode-hook 'my-message-mode-setup)
(add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
(setq mail-user-agent 'message-user-agent)
(setq compose-mail-user-agent-warnings nil)
(setq message-mail-user-agent nil)    ; default is `gnus'
(setq mail-signature "Ronaldo V. Lobato\nrvlobato.com\n")
(setq message-signature "Ronaldo V. Lobato\nrvlobato.com\n")
(setq message-citation-line-format "%f [%Y-%m-%d, %R %z]:\n")
(setq message-citation-line-function 'message-insert-formatted-citation-line)
(setq message-confirm-send nil)
(setq message-kill-buffer-on-exit t)
(setq message-wide-reply-confirm-recipients t)
(setq message-default-charset 'utf-8)
(setq gnus-gcc-mark-as-read t)
(setq gnus-agent t)
(setq gnus-novice-user nil)
;; checking sources
(setq gnus-check-new-newsgroups 'ask-server)
(setq gnus-read-active-file 'some)
;; dribble
(setq gnus-use-dribble-file nil)
(setq gnus-use-cache 'use-as-much-cache-as-possible)
(setq gnus-asynchronous t)
(setq gnus-use-article-prefetch 15)

(setq gnus-home-directory "~/pCloudDrive/gnus"
nnfolder-directory "~/pCloudDrive/gnus/Mail/archive"
message-directory "~/pCloudDrive/gnus/Mail"
nndraft-directory "~/pCloudDrive/gnus/Drafts"
gnus-cache-directory "~/pCloudDrive/gnus/cache")

:bind ("C-c m" . gnus))

;mm-encode
(setq mm-encrypt-option 'guided)

;mml-sec
(setq mml-secure-openpgp-encrypt-to-self t)
(setq mml-secure-openpgp-sign-with-sender t)
(setq mml-secure-smime-encrypt-to-self t)
(setq mml-secure-smime-sign-with-sender t)

(setq send-mail-function 'async-smtpmail-send-it)
(setq message-send-mail-function 'async-smtpmail-send-it)

#+END_SRC

* Org
*** Obtain Org-mode along with the extras

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :config (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))
  )
#+END_SRC

*** Configs

#+BEGIN_SRC emacs-lisp
;; Fold all source blocks on startup.
(setq org-hide-block-startup t)

;; Lists may be labelled with letters.
(setq org-list-allow-alphabetical t)

;; Avoid accidentally editing folded regions, say by adding text after an Org “⋯”.
(setq org-catch-invisible-edits 'show)

;; I use indentation-sensitive programming languages
(setq org-src-preserve-indentation t)

;; Tab should do indent in code blocks
(setq org-src-tab-acts-natively t)

;; Give quote and verse blocks a nice look
(setq org-fontify-quote-and-verse-blocks t)

;; Pressing ENTER on a link should follow it.
(setq org-return-follows-link t)

;; Do not confirm before evaluation
(setq org-confirm-babel-evaluate nil)

;; Do not evaluate code blocks when exporting
(setq org-export-babel-evaluate nil)

;; Show images when opening a file
(setq org-startup-with-inline-images t)

;; Show images after evaluating code blocks
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
#+END_SRC

*** Some initial languages to support

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (emacs-lisp . t)
     (shell      . t)
     (python     . t)
     (haskell    . t)
     (ruby       . t)
     (ocaml      . t)
     (C          . t)  ;; Captial “C” gives access to C, C++, D
     (dot        . t)
     (latex      . t)
     (org        . t)
     (makefile   . t)
     (jupyter    . t)
     )
   )
#+END_SRC

*** Keep the current heading stuck at the top of the window.

#+BEGIN_SRC emacs-lisp
(use-package org-sticky-header
 :hook (org-mode . org-sticky-header-mode)
 :config
 (setq-default
  org-sticky-header-full-path 'full
  ;; Child and parent headings are seperated by a /.
  org-sticky-header-outline-path-separator " / "))
#+END_SRC

*** Bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :hook (org-mode . org-bullets-mode))
#+END_SRC

*** Org produced htmls are coloured

#+begin_src emacs-lisp
(use-package htmlize :defer t)
#+end_src

* Social network

** Twitter

#+begin_src emacs-lisp
(use-package twittering-mode)
(setq twittering-use-master-password t)
#+end_src

* References
** Zotero

#+begin_src emacs-lisp
(use-package zotxt)
#+end_src

# EOF
