#+TITLE: Emacs Configuration
#+AUTHOR: Ronaldo V. Lobato
#+EMAIL: vieira.lobato@gmail.com
#+OPTIONS: toc:nil num:nil

* Agenda & todo
** Agenda

#+BEGIN_SRC emacs-lisp
;; List of all the files & directories where todo items can be found. Only one
;; for now: My default notes file.
(setq org-agenda-files (list org-default-notes-file))
;; Display tags really close to their tasks.
(setq org-agenda-tags-column -10)
;; How many days ahead the default agenda view should look
(setq org-agenda-span 'day)
;; May be any number; the larger the slower it takes to generate the view.
;; One day is thus the fastest ^_^
;; How many days early a deadline item will begin showing up in your agenda list.
(setq org-deadline-warning-days 14)
;; In the agenda view, days that have no associated tasks will still have a line showing the date.
(setq org-agenda-show-all-dates t)
;; Scheduled items marked as complete will not show up in your agenda view.
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done  t)

(setq org-agenda-start-on-weekday nil)
#+END_SRC

*** Super-agenda

#+BEGIN_SRC emacs-lisp
(use-package org-super-agenda
  :hook (org-agenda-mode . origami-mode) ;; Easily fold groups via TAB.
  :bind (:map org-super-agenda-header-map ("<tab>" . origami-toggle-node))
  :config
  (org-super-agenda-mode)
  (setq org-super-agenda-groups
	'((:name "Important" :priority "A")
	  (:name "Personal" :habit t)
	  ;; For everything else, nicely display their heading hierarchy list.
	  (:auto-map (lambda (e) (org-format-outline-path (org-get-outline-path)))))))

;; MA: No noticable effect when using org-super-agenda :/
;;
;; Leave new line at the end of an entry.
;; (setq org-blank-before-new-entry '((heading . t) (plain-list-item . t)))
#+END_SRC

** TO-DO

#+BEGIN_SRC emacs-lisp
;; Location of my todos/notes file
(setq org-default-notes-file "~/gCloudDrive/notes/org/agenda.org")

;; “C-c c” to quickly capture a task/note
(define-key global-map "\C-cc" #'my/org-capture) ;; See below.
#+END_SRC

*** TODO-s respect hierarchical structure
#+BEGIN_SRC emacs-lisp
;; Cannot mark an item DONE if it has a  TODO child.
;; Conversely, all children must be DONE in-order for a parent to be DONE.
(setq org-enforce-todo-dependencies t)
#+END_SRC

* Behaviour
** Auto-revert mode refresh

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

** Auto-save

#+BEGIN_SRC emacs-lisp
(setq auto-save-visited-file-name t)
(setq auto-save-visited-interval 300)
#+END_SRC

** Switch windows with shift-arrows instead of "C-x o" all the time

#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)
#+END_SRC

** Switch between recent buffers

#+BEGIN_SRC emacs-lisp
(use-package buffer-flip
  :bind
   (:map buffer-flip-map
    ("M-<tab>"   . buffer-flip-forward)
    ("M-S-<tab>" . buffer-flip-backward)
    ("C-g"       . buffer-flip-abort))
  :config
    (setq buffer-flip-skip-patterns
	'("^\\*helm\\b")))
;; key to begin cycling buffers.
(global-set-key (kbd "M-<tab>") 'buffer-flip)
#+END_SRC

** Change buffer names for files with the same name. Note that ‘uniquify’ is builtin.

#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-separator "/"               ;; The separator in buffer names.
      uniquify-buffer-name-style 'forward) ;; names/in/this/style
#+END_SRC

** Goes to the last place where it was when you previously visited the same file

#+BEGIN_SRC emacs-lisp
(setq-default save-place  t)
(setq save-place-file "~/.emacs.d/etc/saveplace")
#+END_SRC

** Make it easier to discover key shortcuts

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish
  :config
  (which-key-mode)
  (which-key-setup-side-window-bottom)
  (setq which-key-idle-delay 0.5))
#+END_SRC

** Desired colored output shell

#+BEGIN_SRC emacs-lisp
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+END_SRC

** Modify the titlebar to contain the current file

#+BEGIN_SRC emacs-lisp
(setq frame-title-format "%b")
#+END_SRC

** Moving text around

#+BEGIN_SRC emacs-lisp
;; M-↑,↓ moves line, or marked region; prefix is how many lines.
(use-package move-text
  :config (move-text-default-bindings))
#+END_SRC

** Mouse editing support

#+BEGIN_SRC emacs-lisp
(setq mouse-drag-copy-region t)
#+END_SRC

** Jumping to definitions & references

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :bind (("M-g q"     . dumb-jump-quick-look) ;; Show me in a tooltip.
	 ("M-g ."     . dumb-jump-go-other-window)
	 ("M-g b"     . dumb-jump-back)
	 ("M-g p"     . dumb-jump-go-prompt)
	 ("M-g a"     . xref-find-apropos)) ;; aka C-M-.
  :config
  ;; If source file is visible, just shift focus to it.
  (setq dumb-jump-use-visible-window t))
#+END_SRC

** Highlight defined Lisp symbols

#+BEGIN_SRC emacs-lisp
;; Emacs Lisp specific
(use-package highlight-defined
  :hook (emacs-lisp-mode . highlight-defined-mode))
#+END_SRC

* Cosmetics
** Initial window size and position on screen

#+BEGIN_SRC emacs-lisp
(setq initial-frame-alist
      '((width . 145) ; character
	(height . 45) ; lines
	(top . 200)   ; position on the screen
	(left . 350)))
#+END_SRC

** Disable startup message

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
      initial-scratch-message nil)
#+END_SRC

** Mods in the modeline

#+BEGIN_SRC emacs-lisp
(display-time-mode 1) ;; Display of time
(tool-bar-mode   -1)  ;; No large icons
(scroll-bar-mode -1)  ;; No visual indicator
(menu-bar-mode   -1)  ;; The Mac OS top pane has menu options
(add-hook 'prog-mode-hook #'which-function-mode)
(add-hook 'org-mode-hook  #'which-function-mode)
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
(use-package gruvbox-theme)
(load-theme 'gruvbox-dark-hard t)
#+END_SRC

** Flashing when something goes wrong

#+BEGIN_SRC emacs-lisp
(setq visible-bell 1)
(blink-cursor-mode 1)
#+END_SRC

** Dimming unused windows

#+BEGIN_SRC emacs-lisp
(use-package dimmer
  :config (dimmer-mode))
#+END_SRC

** Highlight matching ‘parenthesis’

#+BEGIN_SRC emacs-lisp
(setq show-paren-delay  0)
(setq show-paren-style 'mixed)
(show-paren-mode)
#+END_SRC

** Do not show some common modes in the modeline, to save space

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :defer 5
  :config
  (diminish 'org-indent-mode))
#+END_SRC

** Rainbow mode

#+BEGIN_SRC emacs-lisp
(require 'rainbow-mode)
(define-globalized-minor-mode my-global-rainbow-mode rainbow-mode
  (lambda () (rainbow-mode 1)))
(my-global-rainbow-mode 1)
#+END_SRC

** Rainbow delimiters

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

** Color Identifiers Mode gives unique highlighting to identifiers

#+BEGIN_SRC emacs-lisp
(use-package color-identifiers-mode
  :config (global-color-identifiers-mode))
;; Sometimes just invoke: M-x color-identifiers:refresh
(run-with-idle-timer 5 t 'color-identifiers:refresh)
#+END_SRC

** Switching from 2 horizontal windows to 2 vertical windows

#+BEGIN_SRC emacs-lisp
(defun my/ensure-two-vertical-windows ()
  "I used this method often when programming in Coq.

When there are two vertical windows, this method ensures the left-most
window contains the buffer with the cursour in it."
  (interactive)
  (let ((otherBuffer (buffer-name)))
    (other-window 1)                ;; C-x 0
    (delete-window)                 ;; C-x 0
    (split-window-right)			;; C-x 3
    (other-window 1)                ;; C-x 0
    (switch-to-buffer otherBuffer)	;; C-x b RET
    (other-window 1)))

(global-set-key (kbd "C-|") 'my/ensure-two-vertical-windows)
#+END_SRC

** Visual line mode

#+BEGIN_SRC emacs-lisp
;; Bent arrows at the end and start of long lines.
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
(diminish 'visual-line-mode)
(global-visual-line-mode 1)
#+END_SRC

* Git
** Magit

#+BEGIN_SRC emacs-lisp
;(use-package magit
;  :config
;  (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC

* Personal information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Ronaldo V. Lobato"
      user-mail-address "vieira.lobato@gmail.com"
      calendar-latitude 33.2471
      calendar-longitude 95.9000
      calendar-location-name "Commerce, Texas")
#+END_SRC

* Spelling
** Cleaning-up any accidental trailing white-space

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC

** Word Completion
*** Company

#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish
  :config
  (global-company-mode 1)
  (setq ;; Only 2 letters required for completion to activate.
   company-minimum-prefix-length 2
   ;; Search other buffers for compleition candidates
   company-dabbrev-other-buffers t
   company-dabbrev-code-other-buffers t
   ;; Show candidates according to importance, then case, then in-buffer frequency
   company-transformers '(company-sort-by-backend-importance
			  company-sort-prefer-same-case-prefix
			  company-sort-by-occurrence)
   ;; Flushright any annotations for a compleition;
   ;; e.g., the description of what a snippet template word expands into.
   company-tooltip-align-annotations t
   ;; Allow (lengthy) numbers to be eligible for completion.
   company-complete-number t
   ;; M-⟪num⟫ to select an option according to its number.
   company-show-numbers t
   ;; Show 10 items in a tooltip; scrollbar otherwise or C-s ^_^
   company-tooltip-limit 10
   ;; Edge of the completion list cycles around.
   company-selection-wrap-around t
   ;; Do not downcase completions by default.
   company-dabbrev-downcase nil
   ;; Even if I write something with the ‘wrong’ case,
   ;; provide the ‘correct’ casing.
   company-dabbrev-ignore-case nil
   ;; Immediately activate completion.
   company-idle-delay 0)
  ;; Use C-/ to manually start company mode at point. C-/ is used by undo-tree.
  ;; Override all minor modes that use C-/; bind-key* is discussed below.
  (bind-key* "C-/" #'company-manual-begin)
  ;; Bindings when the company list is active.
  :bind (:map company-active-map
	      ("C-d" . company-show-doc-buffer) ;; In new temp buffer
	      ("<tab>" . company-complete-selection)
	      ;; Use C-n,p for navigation in addition to M-n,p
	      ("C-n" . (lambda () (interactive) (company-complete-common-or-cycle 1)))
	      ("C-p" . (lambda () (interactive) (company-complete-common-or-cycle -1)))))
;; It's so fast that we don't need a key-binding to start it!
#+END_SRC

** Emacs-langtool

#+BEGIN_SRC emacs-lisp
(require 'langtool)
(setq langtool-java-classpath
      "/usr/share/languagetool:/usr/share/java/languagetool/*")
#+END_SRC

** Flyspell mode

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :diminish
  :hook ((prog-mode . flyspell-prog-mode)
	 ((org-mode text-mode) . flyspell-mode)))
#+END_SRC

** Set the default dictionary Ispell

#+BEGIN_SRC emacs-lisp
(setq ispell-dictionary "english")
#+END_SRC

** Synosaurus

#+BEGIN_SRC emacs-lisp
(use-package synosaurus
  :diminish synosaurus-mode
  :init    (synosaurus-mode)
  :config  (setq synosaurus-choose-method 'popup) ;; 'ido is default.
	   (global-set-key (kbd "M-#") 'synosaurus-choose-and-replace))
#+END_SRC

** Write-good

#+BEGIN_SRC emacs-lisp
(use-package writegood-mode
  ;; Load this whenver I'm composing prose.
  :hook (text-mode org-mode)
  ;; Don't show me the “Wg” marker in the mode line
  :diminish
  ;; Some additional weasel words.
  :config
  (--map (push it writegood-weasel-words)
	 '("some" "simple" "simply" "easy" "often" "easily" "probably"
	   "clearly"               ;; Is the premise undeniably true?
	   "experience shows"      ;; Whose? What kind? How does it do so?
	   "may have"              ;; It may also have not!
	   "it turns out that")))  ;; How does it turn out so?
	   ;; ↯ What is the evidence of highighted phrase? ↯
#+END_SRC

** Placeholder Text

#+BEGIN_SRC emacs-lisp
(use-package lorem-ipsum :defer t)
#+END_SRC

** Google translate

#+BEGIN_SRC emacs-lisp
(use-package google-translate
 :defer t
 :config
   (global-set-key "\C-ct" 'google-translate-at-point))
#+END_SRC

* Frameworks & libraries
** Async

#+BEGIN_SRC emacs-lisp
(autoload 'dired-async-mode "dired-async.el" nil t)
(dired-async-mode 1)
(async-bytecomp-package-mode 1)
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
(use-package helm
 :diminish
 :init (helm-mode t)
 :bind (("M-x"     . helm-M-x)
	("C-x C-f" . helm-find-files)
	("C-x b"   . helm-mini)     ;; See buffers & recent files; more useful.
	("C-x r b" . helm-filtered-bookmarks)
	("C-x C-r" . helm-recentf)  ;; Search for recently edited files
	("C-c i"   . helm-imenu)
	("C-h a"   . helm-apropos)
	;; Look at what was cut recently & paste it in.
	("M-y" . helm-show-kill-ring)

	:map helm-map
	;; We can list ‘actions’ on the currently selected item by C-z.
	("C-z" . helm-select-action)
	;; Let's keep tab-completetion anyhow.
	("TAB"   . helm-execute-persistent-action)
	("<tab>" . helm-execute-persistent-action)))
#+END_SRC

** Ripgrep

#+BEGIN_SRC emacs-lisp
(use-package rg
  :config
  (global-set-key (kbd "M-s g") 'rg)
  (global-set-key (kbd "M-s d") 'rg-dwim))
(use-package helm-rg)
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
(require 'projectile)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(projectile-mode +1)
#+END_SRC

* Programming languages
** lsp-mode

#+BEGIN_SRC emacs-lisp
(require 'lsp-mode)
(add-hook 'prog-mode-hook #'lsp)
#+END_SRC

** Rust

#+BEGIN_SRC emacs-lisp
(use-package rustic)
(use-package lsp-ui)
(use-package helm-lsp
  :config
  (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))
#+END_SRC

** dap-mode

#+BEGIN_SRC emacs-lisp
(add-hook 'dap-stopped-hook
	  (lambda (arg) (call-interactively #'dap-hydra)))
#+END_SRC

** Eldoc

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
(add-hook 'ielm-mode-hook 'eldoc-mode)
#+END_SRC

** Adds spacing around operators

#+BEGIN_SRC emacs-lisp
(use-package electric-operator
  :diminish
  :hook (c-mode . electric-operator-mode))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode)
  :custom (flycheck-display-errors-delay .3))
#+END_SRC

** Documentation pop-up on a completion

#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
 :config
   (setq company-quickhelp-delay 0.1)
   (company-quickhelp-mode))
#+END_SRC

* Old

#+BEGIN_SRC emacs-lisp

; Python autocompletation
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)                 ; optional

; anaconda-mode
(add-hook 'python-mode-hook 'anaconda-mode)
(add-hook 'python-mode-hook 'anaconda-eldoc-mode)

; company-anaconda
(eval-after-load "company"
'(add-to-list 'company-backends 'company-anaconda))

; company-web
(require 'company)                                   ; load company mode
(require 'company-web-html)                          ; load company mode html backend

; company-math
;; global activation of the unicode symbol completion
(add-to-list 'company-backends 'company-math-symbols-unicode)

; company-auctex
(require 'company-auctex)
(company-auctex-init)

; company-c-headers
(add-to-list 'company-backends 'company-c-headers)

; Julia
(add-to-list 'load-path "path-to-julia-shell-mode")
(require 'julia-shell)

(add-to-list 'load-path "path-to-julia-mode")
(require 'julia-mode)

(defun customize-julia-mode ()
  "Customize julia-mode."
  (interactive)
  ;; my customizations go here
  )

(add-hook 'julia-mode-hook 'customize-julia-mode)

; c++
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)

;; replace the `completion-at-point' and `complete-symbol' bindings in
;; irony-mode's buffers by irony-mode's function
(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))
(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

;;ipython notebook
(setq ein:use-auto-complete t)
;; Or, to enable "superpack" (a little bit hacky improvements):
;; (setq ein:use-auto-complete-superpack t)
(setq ein:use-smartrep t)

;;ob-ipython
(require 'ob-ipython)


(eval-after-load "sage-shell-mode"
  '(sage-shell:define-keys sage-shell-mode-map
     "C-c C-i"  'helm-sage-complete
     "C-c C-h"  'helm-sage-describe-object-at-point
     "M-r"      'helm-sage-command-history
     "C-c o"    'helm-sage-output-history))

(require 'sage-shell-mode)

;; Run SageMath by M-x run-sage instead of M-x sage-shell:run-sage
(sage-shell:define-alias)

;; Turn on eldoc-mode in Sage terminal and in Sage source files
(add-hook 'sage-shell-mode-hook #'eldoc-mode)
(add-hook 'sage-shell:sage-mode-hook #'eldoc-mode)

;; If you have Sage 7.4 or later, uncomment the following line.
(setq sage-shell:use-prompt-toolkit t)

;;Inline display of LaTeX outputs and plots (a port of sage-view)
;; If you want to enable inline display of LaTeX outputs only,
;; uncomment the following line.
(setq sage-shell-view-default-commands 'output)

;; If you want to enable inline display of plots only,
;; uncomment the following line.
(setq sage-shell-view-default-commands 'plot)

(add-hook 'sage-shell-after-prompt-hook #'sage-shell-view-mode)

;;ob-sagemath
;; Ob-sagemath supports only evaluating with a session.
(setq org-babel-default-header-args:sage '((:session . t)
					   (:results . "output")))

;; C-c c for asynchronous evaluating (only for SageMath code blocks).
(with-eval-after-load "org"
  (define-key org-mode-map (kbd "C-c c") 'ob-sagemath-execute-async))

;; Do not confirm before evaluation
(setq org-confirm-babel-evaluate nil)

;; Do not evaluate code blocks when exporting.
(setq org-export-babel-evaluate nil)

;; Show images when opening a file.
(setq org-startup-with-inline-images t)

;; Show images after evaluating code blocks.
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
#+END_SRC

EOF
